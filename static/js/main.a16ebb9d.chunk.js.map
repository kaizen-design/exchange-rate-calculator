{"version":3,"sources":["components/RateTable.js","components/CurrencyCodePicker.js","components/AmountField.js","lib/fetch.js","api.js","components/ExchangeRate.js","index.js"],"names":["RateTable","currencyData","amount","className","Object","entries","map","code","rate","exchangeAmount","toLocaleString","style","currency","CurrencyCodePicker","supportedCurrencies","currencyCode","onChange","value","AmountField","aria-label","type","sleep","time","Promise","res","setTimeout","url","a","split","params","URLSearchParams","Set","get","base","rates","exchangeRates","json","success","getExchangeRates","symbols","filter","symbol","join","fetch","then","handleAPIErrors","console","error","info","USD","ExchangeRate","useState","setAmount","setCurrencyCode","setCurrencyData","useEffect","handleCurrencyCode","useCallback","e","target","handleAmountChange","newAmount","ReactDOM","render","document","getElementById"],"mappings":"0LAAO,SAASA,EAAT,GAA8C,IAAzBC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,OACxC,OACE,uBAAOC,UAAU,qBAAjB,SACE,gCACGC,OAAOC,QAAQJ,GAAcK,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAVC,EAAU,KAE5CC,EAAiBP,EAASM,GAAQ,EACxC,OACE,+BACE,6BAAKD,IACL,6BACGE,EAAeC,eAAe,KAAM,CACnCC,MAAO,WACPC,SAAUL,QALPA,UCRd,SAASM,EAAT,GAIH,IAHFC,EAGC,EAHDA,oBACAC,EAEC,EAFDA,aACAC,EACC,EADDA,SAEA,OACE,wBAAQb,UAAU,eAAec,MAAOF,EAAcC,SAAUA,EAAhE,SACGF,EAAoBR,KAAI,SAACC,GAAD,OACvB,wBAAmBU,MAAOV,EAA1B,SACGA,GADUA,QCRd,SAASW,EAAT,GAA4C,IAArBhB,EAAoB,EAApBA,OAAQc,EAAY,EAAZA,SACpC,OACE,sBAAMb,UAAU,oBAAhB,SACE,uBACEgB,aAAW,0BACXC,KAAK,OACLH,MAAOf,EACPc,SAAUA,M,kCCJZK,EAAQ,SAACC,GAAD,OAAU,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAKF,O,4CAMtD,WAAqBI,GAArB,yBAAAC,EAAA,+DACmBD,EAAIE,MAAM,KAD7B,0BAECC,EAAS,IAAIC,qBAFd,MACa,GADb,YAGCT,EAAM,KAHP,cAIW,IAAIU,KAAKF,EAAOG,IAAI,YAAc,IAAIJ,MAAM,MACtDK,EAAOJ,EAAOG,IAAI,QAClBE,EAAQC,EAAcF,GANvB,kBAOE,CAECG,KAFD,WAES,OAAD,6HACJ,CACLC,SAAS,EACTH,UAHS,gDATV,4C,sBCHA,SAASI,EAAiBL,EAAMnB,GACrC,IAAMyB,EAAUzB,EACb0B,QAAO,SAACC,GAAD,OAAYA,IAAWR,KAC9BS,OAEH,ODFK,SAAP,kCCESC,CADE,qDAAiDV,EAAjD,oBAAiEM,IAEvEK,MAAK,SAACpB,GAAD,OAASA,EAAIY,UAClBQ,KAAKC,GACLD,MAAK,SAACpB,GAAD,OAASA,EAAIU,SAOvB,SAASW,EAAgBrB,GACvB,OAAIA,EAAIa,QAAgBb,GACxBsB,QAAQC,MAAR,wBAA+BvB,EAAIuB,MAAMC,OAClC,CACLd,MAAO,CACLe,IAAK,KCpBX,IAAMnC,EAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAEzD,SAASoC,IAAgB,IAAD,EACDC,mBAAS,QADR,mBACtBjD,EADsB,KACdkD,EADc,OAEWD,mBAAS,OAFpB,mBAEtBpC,EAFsB,KAERsC,EAFQ,OAGWF,mBAAS,CAAEF,IAAK,IAH3B,mBAGtBhD,EAHsB,KAGRqD,EAHQ,KAM7BC,qBAAU,WACRjB,EAAiBvB,EAAcD,GAAqB8B,MAAK,SAACV,GACxDoB,EAAgBpB,QAEjB,CAACnB,IAEJ,IAAMyC,EAAqBC,uBACzB,SAACC,GAAD,OAAOL,EAAgBK,EAAEC,OAAO1C,SAChC,IAGI2C,EAAqBH,uBAAY,SAACC,GACtC,IAAIG,EAAYH,EAAEC,OAAO1C,MACzBmC,EAAUS,KACT,IAEH,OACE,qCACE,kCACE,qBAAI1D,UAAU,sBAAd,2BACiB,IACf,cAACU,EAAD,CACEC,oBAAqBA,EACrBC,aAAcA,EACdC,SAAUwC,SAIhB,kCACE,cAACtC,EAAD,CAAahB,OAAQA,EAAQc,SAAU4C,MAEzC,kCACE,cAAC5D,EAAD,CAAWC,aAAcA,EAAcC,OAAQA,S,MCzCvD4D,IAASC,OAAO,cAACb,EAAD,IAAkBc,SAASC,eAAe,U","file":"static/js/main.a16ebb9d.chunk.js","sourcesContent":["export function RateTable({ currencyData, amount }) {\n  return (\n    <table className=\"ExchangeRate-table\">\n      <tbody>\n        {Object.entries(currencyData).map(([code, rate]) => {\n          // NOTE: normally avoid floating point math in JS\n          const exchangeAmount = amount * rate || 0.0;\n          return (\n            <tr key={code}>\n              <td>{code}</td>\n              <td>\n                {exchangeAmount.toLocaleString(\"en\", {\n                  style: \"currency\",\n                  currency: code,\n                })}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","export function CurrencyCodePicker({\n  supportedCurrencies,\n  currencyCode,\n  onChange,\n}) {\n  return (\n    <select className=\"currencyCode\" value={currencyCode} onChange={onChange}>\n      {supportedCurrencies.map((code) => (\n        <option key={code} value={code}>\n          {code}\n        </option>\n      ))}\n    </select>\n  );\n}\n","export function AmountField({ amount, onChange }) {\n  return (\n    <form className=\"ExchangeRate-form\">\n      <input\n        aria-label=\"Amount in base currency\"\n        type=\"text\"\n        value={amount}\n        onChange={onChange}\n      />\n    </form>\n  );\n}\n","import exchangeRates from \"./rates.json\";\n\n// sleep helper to simulate a network call\nconst sleep = (time) => new Promise((res) => setTimeout(res, time));\n\n// since we only make a single fetch call\n// we're going to use this mock fetch method\n// which will simulate a short delay and return\n// with exchange rates after a short period\nexport async function fetch(url) {\n  const [, search = \"\"] = url.split(\"?\");\n  const params = new URLSearchParams(search);\n  await sleep(400);\n  const symbols = new Set((params.get(\"symbols\") || \"\").split(\",\"));\n  const base = params.get(\"base\");\n  const rates = exchangeRates[base];\n  return {\n    // simulate the JSON method on the fetch response\n    async json() {\n      return {\n        success: true,\n        rates,\n      };\n    },\n  };\n}\n","// because the API we were using stopped being free\n// we've added this mock fetch method, which supplies\n// its own exchange rate data\nimport { fetch } from \"./lib/fetch\";\n\n// helper to make our exchange rate API call\nexport function getExchangeRates(base, supportedCurrencies) {\n  const symbols = supportedCurrencies\n    .filter((symbol) => symbol !== base) // exclude your own code from requested symbols\n    .join();\n  const url = `http://api.exchangeratesapi.io/latest?base=${base}&symbols=${symbols}`;\n  return fetch(url)\n    .then((res) => res.json())\n    .then(handleAPIErrors)\n    .then((res) => res.rates);\n}\n\n// if there was an error log it and return super basic mock data\n// errors for this API came back in the form of { success: false, error: {...}}\n// so we can check for that and log any errors and then respond with a basic\n// valid response so the app doesn't crash\nfunction handleAPIErrors(res) {\n  if (res.success) return res;\n  console.error(`Server Error: ${res.error.info}`);\n  return {\n    rates: {\n      USD: 1.0,\n    },\n  };\n}\n","import { useState, useCallback, useEffect } from \"react\";\nimport { RateTable } from \"./RateTable\";\nimport { CurrencyCodePicker } from \"./CurrencyCodePicker\";\nimport { AmountField } from \"./AmountField\";\nimport { getExchangeRates } from \"../api\";\n\nconst supportedCurrencies = [\"USD\", \"EUR\", \"JPY\", \"CAD\", \"GBP\", \"MXN\"];\n\nexport function ExchangeRate() {\n  const [amount, setAmount] = useState(\"1.50\");\n  const [currencyCode, setCurrencyCode] = useState(\"USD\");\n  const [currencyData, setCurrencyData] = useState({ USD: 1.0 });\n\n  // fetch the exchange rates each time currency code changes\n  useEffect(() => {\n    getExchangeRates(currencyCode, supportedCurrencies).then((rates) => {\n      setCurrencyData(rates);\n    });\n  }, [currencyCode]);\n\n  const handleCurrencyCode = useCallback(\n    (e) => setCurrencyCode(e.target.value),\n    []\n  );\n\n  const handleAmountChange = useCallback((e) => {\n    let newAmount = e.target.value;\n    setAmount(newAmount);\n  }, []);\n\n  return (\n    <>\n      <section>\n        <h1 className=\"ExchangeRate-header\">\n          Exchange Rates{\" \"}\n          <CurrencyCodePicker\n            supportedCurrencies={supportedCurrencies}\n            currencyCode={currencyCode}\n            onChange={handleCurrencyCode}\n          />\n        </h1>\n      </section>\n      <section>\n        <AmountField amount={amount} onChange={handleAmountChange} />\n      </section>\n      <section>\n        <RateTable currencyData={currencyData} amount={amount} />\n      </section>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ExchangeRate } from \"./components/ExchangeRate\";\nimport \"./style.css\";\n\nReactDOM.render(<ExchangeRate />, document.getElementById(\"root\"));\n"],"sourceRoot":""}